**Prompt for Claude (logic-only edition—no API keys, no LLM calls)**

> You are a senior React + TypeScript engineer tasked with upgrading the **VideoPromptOptimizer** so that all analysis is performed **entirely in-browser with deterministic logic**—no network requests, no external AI services, no API keys.
> Implement the following requirements in well-commented commits.  Where external NLP is mentioned, satisfy it with lightweight open-source JavaScript libraries that ship in the bundle (e.g. `sentiment`, `wink-nlp`, `compromise`) or by explicit rule-based code.  **Do not** introduce calls to OpenAI, Anthropic, Hugging Face, or any remote endpoint.

---

### 1 Modular local-analysis engine

1 . 1 Create `src/utils/promptAnalyzer.ts`.  Export these fully-typed helpers (pure functions, no side-effects):

```ts
type Block = { score: number; issues: string[]; suggestions: string[] };
export interface PromptAnalysis {
  image: Block;
  video: Block;
  voice: Block;
  overall: { score: number; readiness: 'Production Ready'|'Good'|'Needs Work'|'Poor' };
}
export function analysePrompt(prompt: string): PromptAnalysis
```

1 . 2 Enhance scoring without LLMs:

* **Sentiment check** – use `sentiment` npm package; deduct if polarity < –2.
* **Topic detection** – use keyword clusters (arrays held in `topics.ts`).  Reward matches for “learn”, “explain”, “visualise”, etc.
* **NER** – leverage `compromise` to flag long proper-noun sequences → add pronunciation warning.
* **Syntax clarity** – simple Flesch–Kincaid grade via formula; penalise ≥ 12.
  Each heuristic returns partial points; clamp final to 0–100.

1 . 3 Return a colour-coded “readiness” based on overall score: ≥ 80 → Production Ready; 60–79 → Good; 40–59 → Needs Work; else Poor.

---

### 2 Multi-scene input

2 . 1 Replace single textarea with a **dynamic list**: each scene row has `imagePrompt`, `narrationScript`, `order`.
2 . 2 Scene analysis: call `analysePrompt` on each scene, then compute module-level averages.  Display a table: Scene #, Image %, Video %, Voice %, Readiness badge.
2 . 3 Add **CSV import / export** (comma-safe quoting).  Accept headers `scene_order,image_prompt,narration_script`.

---

### 3 Smart offline optimisation

3 . 1 Move prompt-fixing logic into `useOptimisedPrompt` hook. Strictly rule-based:

* If missing motion verbs, append “Include smooth transitions and dynamic movement.”
* If narration < 50 chars, append “ Provide a clear explanation of key ideas.”
* If keyword cluster absent (“visualise”, “illustrate”, “display”), inject one.
  3 . 2 Add **“Apply Fix” chips** next to suggestions; on click, mutate that scene’s text via the above rules—no AI rewrite.

---

### 4 UX & accessibility

4 . 1 Dark-mode via Tailwind `dark:` utilities; auto-detect `prefers-color-scheme`.
4 . 2 Autosave scenes to `localStorage` every 500 ms; restore on load.
4 . 3 Keyboard shortcuts: `Ctrl + Enter` → analyse; `Ctrl + Shift + C` → copy optimised module prompt.
4 . 4 All interactive elements get `aria-*` labels; ensure WCAG AA contrast.

---

### 5 Performance

5 . 1 Debounce textarea input (300 ms) before running analysis.
5 . 2 Use `requestIdleCallback` or Web Workers for sentiment+FK calculation to keep typing at 60 fps.
5 . 3 Tree-shake Lucide icons and lazy-load heavy nlp libraries.

---

### 6 Testing & CI

6 . 1 Migrate to TypeScript fully.
6 . 2 Unit tests (Jest) for each rule inside `promptAnalyzer.ts` (edge: empty, emoji-only, 1000-word).
6 . 3 Playwright flow: import 3-scene CSV → expect readiness ≥ Good → copy prompt → clipboard contains expected text.
6 . 4 GitHub Actions: lint, test, build.

---

### 7 Docs & best-practice assets

7 . 1 Update README with local-only architecture (no keys needed).
7 . 2 Add `docs/best_prompts.md` – examples of strong vs weak scene prompts.

---

**Deliverables**

* Pull request with modular commits following the sections above.
* `CHANGELOG.md` summarising new features and npm additions.
