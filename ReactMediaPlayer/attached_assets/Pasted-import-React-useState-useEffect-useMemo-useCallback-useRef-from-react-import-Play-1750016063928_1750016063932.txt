import React, { useState, useEffect, useMemo, useCallback, useRef } from 'react';
import { 
  Play, 
  Plus, 
  Trash2, 
  Download, 
  Upload, 
  Copy, 
  Settings, 
  Moon, 
  Sun,
  Zap,
  CheckCircle,
  AlertCircle,
  XCircle,
  Eye,
  EyeOff,
  Lightbulb,
  Target
} from 'lucide-react';

// Types and Interfaces
interface AnalysisBlock {
  score: number;
  issues: string[];
  suggestions: string[];
}

interface PromptAnalysis {
  image: AnalysisBlock;
  video: AnalysisBlock;
  voice: AnalysisBlock;
  overall: { score: number; readiness: 'Production Ready' | 'Good' | 'Needs Work' | 'Poor' };
}

interface Scene {
  id: string;
  scene_order: number;
  image_prompt: string;
  narration_script: string;
  analysis?: PromptAnalysis;
}

// Local Analysis Engine
class PromptAnalyzer {
  private static readonly TOPIC_KEYWORDS = {
    educational: ['learn', 'explain', 'understand', 'concept', 'theory', 'principle', 'definition'],
    visual: ['visualize', 'illustrate', 'display', 'show', 'demonstrate', 'present', 'reveal'],
    motion: ['move', 'transition', 'flow', 'slide', 'zoom', 'pan', 'rotate', 'animate'],
    engagement: ['interactive', 'engaging', 'compelling', 'captivating', 'dynamic', 'vibrant']
  };

  private static readonly MOTION_VERBS = [
    'moves', 'flows', 'transitions', 'slides', 'zooms', 'pans', 'rotates', 'animates',
    'shifts', 'transforms', 'morphs', 'evolves', 'emerges', 'unfolds', 'reveals'
  ];

  private static calculateSentiment(text: string): number {
    const positiveWords = ['good', 'great', 'excellent', 'amazing', 'wonderful', 'perfect', 'best', 'beautiful', 'clear', 'easy'];
    const negativeWords = ['bad', 'terrible', 'awful', 'horrible', 'wrong', 'difficult', 'hard', 'confusing', 'unclear'];
    
    const words = text.toLowerCase().split(/\s+/);
    let score = 0;
    
    words.forEach(word => {
      if (positiveWords.includes(word)) score += 1;
      if (negativeWords.includes(word)) score -= 1;
    });
    
    return score;
  }

  private static calculateFleschKincaid(text: string): number {
    const sentences = text.split(/[.!?]+/).filter(s => s.trim().length > 0).length;
    const words = text.split(/\s+/).filter(w => w.length > 0).length;
    const syllables = text.split(/\s+/).reduce((count, word) => {
      return count + Math.max(1, word.replace(/[^aeiouAEIOU]/g, '').length);
    }, 0);

    if (sentences === 0 || words === 0) return 0;
    
    return 206.835 - (1.015 * (words / sentences)) - (84.6 * (syllables / words));
  }

  private static detectProperNouns(text: string): string[] {
    const words = text.split(/\s+/);
    const properNouns = words.filter(word => 
      word.length > 2 && 
      word[0] === word[0].toUpperCase() && 
      word.slice(1) === word.slice(1).toLowerCase() &&
      !['The', 'A', 'An', 'This', 'That'].includes(word)
    );
    return properNouns;
  }

  private static scoreTopicRelevance(text: string): number {
    const lowerText = text.toLowerCase();
    let score = 0;
    
    Object.values(this.TOPIC_KEYWORDS).forEach(keywords => {
      keywords.forEach(keyword => {
        if (lowerText.includes(keyword)) score += 10;
      });
    });
    
    return Math.min(100, score);
  }

  private static analyzeImage(prompt: string): AnalysisBlock {
    const issues: string[] = [];
    const suggestions: string[] = [];
    let score = 50; // Base score

    // Length check
    if (prompt.length < 50) {
      issues.push('Image prompt too short');
      suggestions.push('Add more visual descriptors and details');
      score -= 20;
    } else if (prompt.length > 200) {
      score += 10;
    }

    // Visual keywords
    const visualKeywords = ['color', 'style', 'lighting', 'composition', 'detailed', 'realistic', 'artistic'];
    const hasVisualKeywords = visualKeywords.some(keyword => 
      prompt.toLowerCase().includes(keyword)
    );
    
    if (!hasVisualKeywords) {
      issues.push('Missing visual style descriptors');
      suggestions.push('Specify art style, colors, or lighting');
      score -= 15;
    } else {
      score += 15;
    }

    // Topic relevance
    const topicScore = this.scoreTopicRelevance(prompt);
    score += topicScore * 0.2;

    // Proper nouns (might need pronunciation)
    const properNouns = this.detectProperNouns(prompt);
    if (properNouns.length > 3) {
      issues.push('Many proper nouns may need pronunciation guide');
      suggestions.push('Consider simplifying technical terms');
      score -= 10;
    }

    return {
      score: Math.max(0, Math.min(100, Math.round(score))),
      issues,
      suggestions
    };
  }

  private static analyzeVideo(prompt: string): AnalysisBlock {
    const issues: string[] = [];
    const suggestions: string[] = [];
    let score = 50; // Base score

    // Motion verbs check
    const hasMotion = this.MOTION_VERBS.some(verb => 
      prompt.toLowerCase().includes(verb)
    );
    
    if (!hasMotion) {
      issues.push('No motion described');
      suggestions.push('Add motion verbs like "flows", "transitions", "zooms"');
      score -= 25;
    } else {
      score += 20;
    }

    // Duration indicators
    const durationKeywords = ['second', 'duration', 'time', 'quick', 'slow', 'smooth'];
    const hasDuration = durationKeywords.some(keyword => 
      prompt.toLowerCase().includes(keyword)
    );
    
    if (!hasDuration) {
      issues.push('Duration unclear');
      suggestions.push('Specify timing like "smooth 4-second transition"');
      score -= 15;
    } else {
      score += 15;
    }

    // Engagement keywords
    const engagementWords = this.TOPIC_KEYWORDS.engagement;
    const hasEngagement = engagementWords.some(word => 
      prompt.toLowerCase().includes(word)
    );
    
    if (hasEngagement) {
      score += 10;
    }

    // Length appropriateness
    if (prompt.length < 30) {
      issues.push('Video description too brief');
      suggestions.push('Describe the visual sequence in more detail');
      score -= 15;
    }

    return {
      score: Math.max(0, Math.min(100, Math.round(score))),
      issues,
      suggestions
    };
  }

  private static analyzeVoice(script: string): AnalysisBlock {
    const issues: string[] = [];
    const suggestions: string[] = [];
    let score = 50; // Base score

    // Length check
    if (script.length < 50) {
      issues.push('Narration too short');
      suggestions.push('Expand explanation for better understanding');
      score -= 25;
    } else if (script.length > 500) {
      issues.push('Narration might be too long for video segment');
      suggestions.push('Consider breaking into shorter segments');
      score -= 10;
    } else {
      score += 15;
    }

    // Readability (Flesch-Kincaid)
    const readability = this.calculateFleschKincaid(script);
    if (readability < 60) { // Difficult to read
      issues.push('Complex language detected');
      suggestions.push('Simplify vocabulary and sentence structure');
      score -= 20;
    } else if (readability > 80) { // Easy to read
      score += 15;
    }

    // Sentiment check
    const sentiment = this.calculateSentiment(script);
    if (sentiment < -2) {
      issues.push('Negative tone detected');
      suggestions.push('Use more positive, encouraging language');
      score -= 15;
    } else if (sentiment > 2) {
      score += 10;
    }

    // Educational keywords
    const educationalScore = this.scoreTopicRelevance(script);
    score += educationalScore * 0.15;

    // Proper nouns for pronunciation
    const properNouns = this.detectProperNouns(script);
    if (properNouns.length > 5) {
      issues.push('Many technical terms may need pronunciation guide');
      suggestions.push('Add phonetic spelling for complex terms');
      score -= 10;
    }

    return {
      score: Math.max(0, Math.min(100, Math.round(score))),
      issues,
      suggestions
    };
  }

  static analyzePrompt(prompt: string): PromptAnalysis {
    const imageAnalysis = this.analyzeImage(prompt);
    const videoAnalysis = this.analyzeVideo(prompt);
    const voiceAnalysis = this.analyzeVoice(prompt);
    
    const overallScore = Math.round(
      (imageAnalysis.score + videoAnalysis.score + voiceAnalysis.score) / 3
    );
    
    let readiness: 'Production Ready' | 'Good' | 'Needs Work' | 'Poor';
    if (overallScore >= 80) readiness = 'Production Ready';
    else if (overallScore >= 60) readiness = 'Good';
    else if (overallScore >= 40) readiness = 'Needs Work';
    else readiness = 'Poor';

    return {
      image: imageAnalysis,
      video: videoAnalysis,
      voice: voiceAnalysis,
      overall: { score: overallScore, readiness }
    };
  }
}

// Optimization Engine
class PromptOptimizer {
  static optimizeImagePrompt(prompt: string): string {
    let optimized = prompt;
    
    // Add visual descriptors if missing
    const visualKeywords = ['detailed', 'realistic', 'vibrant colors', 'professional'];
    const hasVisuals = visualKeywords.some(kw => prompt.toLowerCase().includes(kw));
    if (!hasVisuals && prompt.length > 0) {
      optimized += ' Detailed, professional style with vibrant colors.';
    }
    
    return optimized.trim();
  }

  static optimizeVideoPrompt(prompt: string): string {
    let optimized = prompt;
    
    // Add motion if missing
    const motionVerbs = ['flows', 'transitions', 'moves', 'zooms'];
    const hasMotion = motionVerbs.some(verb => prompt.toLowerCase().includes(verb));
    if (!hasMotion && prompt.length > 0) {
      optimized += ' Include smooth transitions and dynamic movement.';
    }
    
    return optimized.trim();
  }

  static optimizeVoiceScript(script: string): string {
    let optimized = script;
    
    // Expand if too short
    if (script.length < 50 && script.length > 0) {
      optimized += ' Provide a clear explanation of key ideas.';
    }
    
    // Add educational keywords if missing
    const educationalKeywords = ['learn', 'understand', 'explain'];
    const hasEducational = educationalKeywords.some(kw => script.toLowerCase().includes(kw));
    if (!hasEducational && script.length > 0) {
      optimized += ' This helps you understand the concept better.';
    }
    
    return optimized.trim();
  }
}

// Debounce hook
const useDebounce = (value: string, delay: number) => {
  const [debouncedValue, setDebouncedValue] = useState(value);

  useEffect(() => {
    const handler = setTimeout(() => {
      setDebouncedValue(value);
    }, delay);

    return () => clearTimeout(handler);
  }, [value, delay]);

  return debouncedValue;
};

// Main Component
const VideoPromptOptimizer: React.FC = () => {
  const [scenes, setScenes] = useState<Scene[]>([
    {
      id: '1',
      scene_order: 1,
      image_prompt: '',
      narration_script: ''
    }
  ]);
  
  const [darkMode, setDarkMode] = useState(() => {
    if (typeof window !== 'undefined') {
      return window.matchMedia('(prefers-color-scheme: dark)').matches;
    }
    return false;
  });
  
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const analyzeTimeoutRef = useRef<NodeJS.Timeout>();

  // Auto-save to memory state (no localStorage per requirements)
  const savedScenes = useRef<Scene[]>([]);
  
  useEffect(() => {
    const saveTimer = setTimeout(() => {
      savedScenes.current = scenes;
    }, 500);
    return () => clearTimeout(saveTimer);
  }, [scenes]);

  // Dark mode effect
  useEffect(() => {
    if (darkMode) {
      document.documentElement.classList.add('dark');
    } else {
      document.documentElement.classList.remove('dark');
    }
  }, [darkMode]);

  // Keyboard shortcuts
  useEffect(() => {
    const handleKeyboard = (e: KeyboardEvent) => {
      if (e.ctrlKey || e.metaKey) {
        if (e.key === 'Enter') {
          e.preventDefault();
          analyzeAllScenes();
        } else if (e.shiftKey && e.key === 'C') {
          e.preventDefault();
          copyOptimizedPrompts();
        }
      }
    };

    document.addEventListener('keydown', handleKeyboard);
    return () => document.removeEventListener('keydown', handleKeyboard);
  }, [scenes]);

  // Debounced analysis
  const debouncedAnalysis = useCallback((updatedScenes: Scene[]) => {
    if (analyzeTimeoutRef.current) {
      clearTimeout(analyzeTimeoutRef.current);
    }
    
    analyzeTimeoutRef.current = setTimeout(() => {
      const analyzed = updatedScenes.map(scene => {
        if (scene.image_prompt.trim() || scene.narration_script.trim()) {
          const combinedPrompt = `${scene.image_prompt} ${scene.narration_script}`.trim();
          const analysis = PromptAnalyzer.analyzePrompt(combinedPrompt);
          return { ...scene, analysis };
        }
        return { ...scene, analysis: undefined };
      });
      setScenes(analyzed);
    }, 300);
  }, []);

  const addScene = () => {
    const newScene: Scene = {
      id: Date.now().toString(),
      scene_order: scenes.length + 1,
      image_prompt: '',
      narration_script: ''
    };
    const updatedScenes = [...scenes, newScene];
    setScenes(updatedScenes);
  };

  const removeScene = (id: string) => {
    const updatedScenes = scenes.filter(scene => scene.id !== id);
    setScenes(updatedScenes);
    debouncedAnalysis(updatedScenes);
  };

  const updateScene = (id: string, field: keyof Scene, value: string | number) => {
    const updatedScenes = scenes.map(scene => 
      scene.id === id ? { ...scene, [field]: value } : scene
    );
    setScenes(updatedScenes);
    
    // Auto-analyze with debounce
    if (field === 'image_prompt' || field === 'narration_script') {
      debouncedAnalysis(updatedScenes);
    }
  };

  const analyzeAllScenes = async () => {
    setIsAnalyzing(true);
    
    // Use requestIdleCallback for performance
    const analyzeInIdle = () => {
      const analyzed = scenes.map(scene => {
        if (scene.image_prompt.trim() || scene.narration_script.trim()) {
          const combinedPrompt = `${scene.image_prompt} ${scene.narration_script}`.trim();
          const analysis = PromptAnalyzer.analyzePrompt(combinedPrompt);
          return { ...scene, analysis };
        }
        return { ...scene, analysis: undefined };
      });
      setScenes(analyzed);
      setIsAnalyzing(false);
    };

    if ('requestIdleCallback' in window) {
      requestIdleCallback(analyzeInIdle);
    } else {
      setTimeout(analyzeInIdle, 0);
    }
  };

  const applyOptimization = (sceneId: string, type: 'image' | 'video' | 'voice') => {
    const scene = scenes.find(s => s.id === sceneId);
    if (!scene) return;

    let optimizedText = '';
    if (type === 'image') {
      optimizedText = PromptOptimizer.optimizeImagePrompt(scene.image_prompt);
      updateScene(sceneId, 'image_prompt', optimizedText);
    } else if (type === 'video') {
      optimizedText = PromptOptimizer.optimizeVideoPrompt(scene.image_prompt);
      updateScene(sceneId, 'image_prompt', optimizedText);
    } else if (type === 'voice') {
      optimizedText = PromptOptimizer.optimizeVoiceScript(scene.narration_script);
      updateScene(sceneId, 'narration_script', optimizedText);
    }
  };

  const getReadinessBadge = (readiness?: string) => {
    if (!readiness) return { color: 'bg-gray-500', text: 'Not analyzed', icon: AlertCircle };
    
    switch (readiness) {
      case 'Production Ready': return { color: 'bg-green-500', text: 'Production Ready', icon: CheckCircle };
      case 'Good': return { color: 'bg-blue-500', text: 'Good', icon: CheckCircle };
      case 'Needs Work': return { color: 'bg-yellow-500', text: 'Needs Work', icon: AlertCircle };
      case 'Poor': return { color: 'bg-red-500', text: 'Poor', icon: XCircle };
      default: return { color: 'bg-gray-500', text: readiness, icon: AlertCircle };
    }
  };

  const getScoreColor = (score: number) => {
    if (score >= 80) return 'bg-green-500';
    if (score >= 60) return 'bg-blue-500';
    if (score >= 40) return 'bg-yellow-500';
    return 'bg-red-500';
  };

  const exportToCSV = () => {
    const headers = ['scene_order', 'image_prompt', 'narration_script'];
    const csvContent = [
      headers.join(','),
      ...scenes.map(scene => [
        scene.scene_order,
        `"${scene.image_prompt.replace(/"/g, '""')}"`,
        `"${scene.narration_script.replace(/"/g, '""')}"`
      ].join(','))
    ].join('\n');

    const blob = new Blob([csvContent], { type: 'text/csv' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'video_scenes.csv';
    a.click();
    URL.revokeObjectURL(url);
  };

  const handleCSVUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;

    const reader = new FileReader();
    reader.onload = (e) => {
      const text = e.target?.result as string;
      const lines = text.split('\n').filter(line => line.trim());
      const headers = lines[0].split(',');
      
      const newScenes: Scene[] = lines.slice(1).map((line, index) => {
        // Simple CSV parsing - handle quoted fields
        const values: string[] = [];
        let currentValue = '';
        let inQuotes = false;
        
        for (let i = 0; i < line.length; i++) {
          const char = line[i];
          if (char === '"') {
            if (inQuotes && line[i + 1] === '"') {
              currentValue += '"';
              i++;
            } else {
              inQuotes = !inQuotes;
            }
          } else if (char === ',' && !inQuotes) {
            values.push(currentValue);
            currentValue = '';
          } else {
            currentValue += char;
          }
        }
        values.push(currentValue);
        
        return {
          id: Date.now().toString() + index,
          scene_order: parseInt(values[0]) || index + 1,
          image_prompt: values[1] || '',
          narration_script: values[2] || ''
        };
      }).filter(scene => scene.image_prompt || scene.narration_script);

      if (newScenes.length > 0) {
        setScenes(newScenes);
        debouncedAnalysis(newScenes);
      }
    };
    reader.readAsText(file);
  };

  const copyOptimizedPrompts = () => {
    const optimizedContent = scenes.map((scene, index) => 
      `Scene ${index + 1}:\nImage: ${scene.image_prompt}\nNarration: ${scene.narration_script}\n`
    ).join('\n');
    
    navigator.clipboard.writeText(optimizedContent);
  };

  const overallScore = useMemo(() => {
    const analyzedScenes = scenes.filter(s => s.analysis);
    if (analyzedScenes.length === 0) return 0;
    
    const totalScore = analyzedScenes.reduce((sum, scene) => 
      sum + (scene.analysis?.overall.score || 0), 0
    );
    return Math.round(totalScore / analyzedScenes.length);
  }, [scenes]);

  return (
    <div className={`min-h-screen transition-colors duration-300 ${
      darkMode ? 'dark bg-gray-900 text-white' : 'bg-gray-50 text-gray-900'
    }`}>
      <div className="container mx-auto px-4 py-8 max-w-6xl">
        {/* Header */}
        <div className="flex items-center justify-between mb-8">
          <div>
            <h1 className="text-3xl font-bold mb-2">Video Prompt Optimizer</h1>
            <p className="text-gray-600 dark:text-gray-400">
              Offline AI-powered assistant for e-learning video production
            </p>
            <p className="text-sm text-green-600 dark:text-green-400 mt-1">
              ✓ No API keys required • ✓ Works offline • ✓ Privacy-first
            </p>
          </div>
          
          <div className="flex items-center space-x-4">
            {/* Overall Score */}
            {overallScore > 0 && (
              <div className="flex items-center space-x-2">
                <span className="text-sm font-medium">Overall Score:</span>
                <div className={`px-3 py-1 rounded-full text-white text-sm font-bold ${getScoreColor(overallScore)}`}>
                  {overallScore}%
                </div>
              </div>
            )}
            
            {/* Dark Mode Toggle */}
            <button
              onClick={() => setDarkMode(!darkMode)}
              className="p-2 rounded-lg hover:bg-gray-200 dark:hover:bg-gray-700 transition-colors"
              aria-label="Toggle dark mode"
            >
              {darkMode ? <Sun size={20} /> : <Moon size={20} />}
            </button>
          </div>
        </div>

        {/* Action Bar */}
        <div className="flex flex-wrap items-center gap-4 mb-6">
          <button
            onClick={analyzeAllScenes}
            disabled={isAnalyzing}
            className="flex items-center space-x-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
          >
            <Zap size={16} />
            <span>{isAnalyzing ? 'Analyzing...' : 'Analyze All (Ctrl+Enter)'}</span>
          </button>

          <button
            onClick={addScene}
            className="flex items-center space-x-2 px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors focus:ring-2 focus:ring-green-500 focus:ring-offset-2"
          >
            <Plus size={16} />
            <span>Add Scene</span>
          </button>

          <button
            onClick={copyOptimizedPrompts}
            className="flex items-center space-x-2 px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition-colors focus:ring-2 focus:ring-gray-500 focus:ring-offset-2"
          >
            <Copy size={16} />
            <span>Copy All (Ctrl+Shift+C)</span>
          </button>

          <button
            onClick={exportToCSV}
            className="flex items-center space-x-2 px-4 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 transition-colors focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2"
          >
            <Download size={16} />
            <span>Export CSV</span>
          </button>

          <label className="flex items-center space-x-2 px-4 py-2 bg-orange-600 text-white rounded-lg hover:bg-orange-700 cursor-pointer transition-colors focus-within:ring-2 focus-within:ring-orange-500 focus-within:ring-offset-2">
            <Upload size={16} />
            <span>Import CSV</span>
            <input
              type="file"
              accept=".csv"
              onChange={handleCSVUpload}
              className="hidden"
            />
          </label>
        </div>

        {/* Scenes List */}
        <div className="space-y-6">
          {scenes.map((scene, index) => {
            const badge = getReadinessBadge(scene.analysis?.overall.readiness);
            const IconComponent = badge.icon;

            return (
              <div
                key={scene.id}
                className="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-6"
              >
                {/* Scene Header */}
                <div className="flex items-center justify-between mb-4">
                  <div className="flex items-center space-x-4">
                    <h3 className="text-lg font-semibold">Scene {scene.scene_order}</h3>
                    <div className={`flex items-center space-x-1 px-2 py-1 rounded-full text-xs font-medium text-white ${badge.color}`}>
                      <IconComponent size={12} />
                      <span>{badge.text}</span>
                    </div>
                  </div>
                  
                  {scenes.length > 1 && (
                    <button
                      onClick={() => removeScene(scene.id)}
                      className="p-2 text-red-500 hover:bg-red-50 dark:hover:bg-red-900/20 rounded-lg transition-colors"
                      aria-label="Remove scene"
                    >
                      <Trash2 size={16} />
                    </button>
                  )}
                </div>

                {/* Scene Content */}
                <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                  {/* Image Prompt */}
                  <div>
                    <label className="block text-sm font-medium mb-2">
                      Image Prompt
                    </label>
                    <textarea
                      value={scene.image_prompt}
                      onChange={(e) => updateScene(scene.id, 'image_prompt', e.target.value)}
                      placeholder="Describe the visual scene in detail..."
                      className="w-full h-32 px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 resize-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    />
                  </div>

                  {/* Narration Script */}
                  <div>
                    <label className="block text-sm font-medium mb-2">
                      Narration Script
                    </label>
                    <textarea
                      value={scene.narration_script}
                      onChange={(e) => updateScene(scene.id, 'narration_script', e.target.value)}
                      placeholder="Write the voice-over script..."
                      className="w-full h-32 px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 resize-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    />
                  </div>
                </div>

                {/* Analysis Results */}
                {scene.analysis && (
                  <div className="mt-6 pt-6 border-t border-gray-200 dark:border-gray-700">
                    <h4 className="font-medium mb-4">Analysis Results</h4>
                    
                    {/* Score Bars */}
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
                      {(['image', 'video', 'voice'] as const).map((category) => {